# 项目底层代码建议

#### 术语描述：

- 开发环境：开发人员开发时使用，变动最大也是最快的；
- 测试环境：一般为部署在内部环境中，供项目经理查看及给客户演示，公司内部并未有测试的概念；开发人员往往通过自己得意识，很难点出意外的bug。例如一个数值字段，开发测试时下意识的会输入数值类型，不会去输入String类型；非空字段也都会下意识的输入一个数值；
- 生产环境：部署在客户的真实环境中，即线上版本；

#### 数据库表字段统一管理：

痛点：项目多人协作，每人维护不同的表及表字段，开发库开发完成后，无法快速同步到生产环境中；

方案：

1. 使用工具维护，无论在什么环境只需要程序自动生成或同步即可；
2. 现有方案，开发每次记录修改的表及字段，项目发布时，人工一条一条的进行生产环境同步；一两条则罢，上百个字段，谁去做不会烦躁？

#### 底层代码陈旧过度封装：

痛点：

- 公司内部基于若依框架自行封装的mkl_pds,版本众多，无人维护，源码丢失，遇到问题无法通过修改原始代码解决，只能绕路而行；
- jdk、框架、第三方引用过于陈旧，2010年的顶级手机iphone4现在给你，你还会用吗？jdk 8 官方已不在为维护，新版本有很多新特性，可使代码更简洁；Shiro版本过低，由于阿里发出强制更改警告，因此才想办法升级；若依新版的框架也早已支持前后端分离代码毫无改革，新特性从未使用，代码的编写模式依旧停留在5年前，甚至更早；

方案：

1. 核心代码封装使用，源码可选择放在github开源或者放在公司服务器上供内部员工查看，必要修改时，可提交需求后方可在核心代码中新增需求、功能、bug修复；
2. 建议新项目使用java 11或官方推崇的更高版本，实际使用体验与java 8无异；差异在服务器部署上，新项目全部使用最新的java后，新老项目服务器分开，就不存在什么差异了；
3. 第三方类库引用标准化，如处理json，规定为阿里巴巴的处理类(alibaba/fastjson)，现有项目中发现引用很多第三方类库，用法规则不同，使用起来没有同一标准，引用过多使得代码包臃肿;

#### 前后端始中未分离：

痛点：

- 若依框架写好的东西，小程序等独立使用时，需要额外开发或顺应开发api，与MVC模式代码相同，但是需要额外处理，额外增加了维护和工作量；
- 后端与前端理论上工作各执其责，实际衔接上，大部分前端代码仍由后端人员进行开发；如前端开发，则代码质量惨不忍睹，毫无复用性；为维护埋下隐患；
- 前端使用的组件，均是各个开源项目引用，引用类库众多，版本不一，维护难，容易出现兼容性等未知的错误；找的组件是否好用，全靠前端运气；

方案：

1. 使用前后端分离，若依新版本已提供；基于若依设计上的问题，后端可以找寻更优秀的框架来代替，前提是必须是前后端分离的框架；
2. 前后端分离后，前端使用前端开源框架（如：element、iview等），框架会提供非常丰富的前端组件，无需前端人员再去查找，前端全部交由后端开发人员来完成，布局及美观度前端人员进行配合即可；
3. 前后端发分离后，不管是小程序还是app及pc端，使用一套后台代码即可；
4. 每个客户端对应的前端框架需要一定的时间去搭建，搭建好后即可在日后的项目中复用；

#### 代码逻辑问题：

痛点：

- 所有Date类型均以String类型存入数据库中，后台代码中也使用String进行操作。获取时间不用jdk,用substring去截取，毫无可读性，维护难；
- SQL编写不规范，导致查询效率下降，很多页面打开缓慢都是因为此原因；
- 数据库持久化直接传，Map替代对象，不对照数据库字段，无法操作；
- 业务逻辑交由后台处理，前端仅需调用接口，切勿不同的逻辑前端前台嵌套多层请求后台，实际后台把逻辑写好即可；
- “多国语言穿插使用”，jquery、vue、thymeleaf等同时使用，降低代码可读性及提高开发及维护成本；
- 粗心导致命名等问题出现，例如public_opeanId明显单词拼错了,正确的为public_openId
- 数据库、map、页面前端属性名成不统一，导致额外的代码需要进行属性名转换；

方案：

1. 所有Date统一使用Date类型来存储；
2. 整理查询规范，按照规范来编写sql来达到尽可能的快速；
3. 万物皆对象，不在使用Map；
4. 前后分离后使用vue生态；小程序可使用vue生态或小程序生态来开发；H5应该趁早放弃；

#### 执行方案：

前期建立在充裕的开发时间基础上；

1. 根据需求设计好底层数据结构,确定前后端分离后端框架，进行定制开发，作为一个底层框架进行维护，仅作底层（登录、用户、权限、角色、部门等核心功能），不做具体的业务开发；
2. PC端迎合后端需求，进行页面的开发；其他客户端日后使用时进行开发即可，也有很多优秀的开源框架（如vant、Mand Mobile等）；
3. 完成前两步公司内部的“若依”框架就算搭建完成，随着使用不断的完善错误，修正代码后，可仿照“若依”开发代码生成功能；
4. app及微信小程序组件实际开发过程中需要二次封装，考验前端人员技术的时候到了（下拉列表框等常用组件必须封装，否则一个下拉列表框就要写十几行代码，封装后一行即可实现需要的功能，PC端不存在该问题）；
5. java 持久化层的开发周期较长，用时至少是C#的1-2倍以上，日后演示项目可使用C#开发，当项目立项后，只需要重写java后端代码，前端代码及数据设计均无需修改，该方式可以大大增加开发进度，及减少成本；
6. 核心代码及技术难点，需由专人维护及解决；具体开发人员只需关注业务层面，遇到技术难点直接抛给专人去做；

PS：

1. 优秀的前端框架UI已经美观了，想要订制自己的样式进行开发，需要改动原始框架的底层，难度及成本较高，因此需要确定前端框架的UI是否符合公司定位；
2. 原生微信小程序的代码demo可参阅乐高总部项目；
3. UI在线demo：https://admin.iviewui.com/login https://panjiachen.github.io/vue-element-admin/#/login?redirect=%2Fdashboard
